{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:100% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:100% !important; }</style>\")) #makes the display bars longer and spread out 100% across the screen width"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from vivarium import Artifact\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from db_queries import get_ids, get_outputs\n",
    "import scipy.stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution for the cost of BEP\n",
    "loc = 51.42\n",
    "mean = 60.42 - loc\n",
    "a = 1.5\n",
    "scale = mean/a\n",
    "fig, ax = plt.subplots(1,1)\n",
    "x = np.linspace(loc, loc+(120-50), 200)\n",
    "ax.plot(x, scipy.stats.gamma.pdf(x, a, loc, scale), 'r-', lw=1, alpha=0.9, label='beta pdf')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/ihme/costeffectiveness/results/vivarium_gates_bep/summer_run3/india/2020_09_07_08_30_41\n",
      "branches.yaml  keyspace.yaml             output.hdf        settings.py\r\n",
      "\u001b[0m\u001b[01;34mcount_data\u001b[0m/    \u001b[01;34mlogs\u001b[0m/                     \u001b[01;34m__pycache__\u001b[0m/\r\n",
      "\u001b[01;34mfinal_data\u001b[0m/    model_specification.yaml  requirements.txt\r\n"
     ]
    }
   ],
   "source": [
    "%cd '/share/costeffectiveness/results/vivarium_gates_bep/summer_run3/india/2020_09_07_08_30_41'\n",
    "%ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "run_1_output_dirs = ['/share/costeffectiveness/results/vivarium_gates_bep/summer_run1/india/2020_09_04_17_40_19/count_data/',\n",
    "                  '/share/costeffectiveness/results/vivarium_gates_bep/summer_run1/mali/2020_09_04_17_51_31/count_data/',\n",
    "                  '/share/costeffectiveness/results/vivarium_gates_bep/summer_run1/pakistan/2020_09_05_11_51_49/count_data/',\n",
    "                  '/share/costeffectiveness/results/vivarium_gates_bep/summer_run1/tanzania/2020_09_05_11_55_58/count_data/']\n",
    "\n",
    "run_2_output_dirs = ['/share/costeffectiveness/results/vivarium_gates_bep/summer_run2/india/2020_09_05_12_05_16/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run2/mali/2020_09_05_12_09_07/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run2/pakistan/2020_09_07_08_21_34/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run2/tanzania/2020_09_07_08_23_52/count_data/']\n",
    "\n",
    "run_3_output_dirs = ['/share/costeffectiveness/results/vivarium_gates_bep/summer_run3/india/2020_09_07_08_30_41/count_data/',\n",
    "              '/share/costeffectiveness/results/vivarium_gates_bep/summer_run3/mali/2020_09_07_08_32_30/count_data/',\n",
    "              '/share/costeffectiveness/results/vivarium_gates_bep/summer_run3/pakistan/2020_09_07_08_34_30/count_data/',\n",
    "              '/share/costeffectiveness/results/vivarium_gates_bep/summer_run3/tanzania/2020_09_07_08_36_10/count_data/']\n",
    "\n",
    "run_4_output_dirs = ['/share/costeffectiveness/results/vivarium_gates_bep/summer_run4/india/2020_09_07_08_39_06/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run4/mali/2020_09_07_08_41_07/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run4/pakistan/2020_09_07_08_42_41/count_data/',\n",
    "                    '/share/costeffectiveness/results/vivarium_gates_bep/summer_run4/tanzania/2020_09_07_08_44_13/count_data/']\n",
    "\n",
    "locations = ['India',\n",
    "           'Mali',\n",
    "           'Pakistan',\n",
    "           'Tanzania']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_count_data(data_file):\n",
    "    data = pd.DataFrame()\n",
    "    for i in list(range(0,len(run_1_output_dirs))):\n",
    "        temp1 = pd.read_hdf(run_1_output_dirs[i] + data_file + '.hdf')\n",
    "        temp1['scenario'] = temp1['scenario'].replace('bep_hd_scale_up', 'bep_hd_scale_up_i').replace('bep_hd_targeted_scale_up','bep_hd_targeted_scale_up_i') \n",
    "        temp2 = pd.read_hdf(run_2_output_dirs[i] + data_file + '.hdf')\n",
    "        temp3 = pd.read_hdf(run_3_output_dirs[i] + data_file + '.hdf')\n",
    "        temp3['scenario'] = temp3['scenario'].replace('bep_hd_scale_up', 'bep_hd_scale_up_ii').replace('bep_hd_targeted_scale_up','bep_hd_targeted_scale_up_ii')\n",
    "        temp4 = pd.read_hdf(run_4_output_dirs[i] + data_file + '.hdf')\n",
    "        temp4['scenario'] = temp4['scenario'].replace('bep_hd_scale_up', 'bep_hd_scale_up_iii').replace('bep_hd_targeted_scale_up','bep_hd_targeted_scale_up_iii')\n",
    "        temp = temp1.append(temp2).append(temp3).append(temp4)\n",
    "        temp['location'] = locations[i]\n",
    "        data = data.append(temp)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ylls = read_count_data('ylls')\n",
    "ylds = read_count_data('ylds')\n",
    "person_time = read_count_data('person_time')\n",
    "population = read_count_data('population')\n",
    "deaths = read_count_data('deaths')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/ihme/homes/alibow/.conda/envs/vivarium_conic_lsff/lib/python3.6/site-packages/pandas/core/frame.py:6692: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  sort=sort)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>measure</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">dalys</th>\n",
       "      <th>baseline</th>\n",
       "      <td>315693.578494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>295746.818092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>299877.365618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>282014.887368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>280700.444971</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              value\n",
       "input_draw location measure scenario                               \n",
       "3          India    dalys   baseline                  315693.578494\n",
       "                            bep_ce_scale_up           295746.818092\n",
       "                            bep_ce_targeted_scale_up  299877.365618\n",
       "                            bep_hd_scale_up_i         282014.887368\n",
       "                            bep_hd_scale_up_ii        280700.444971"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_counts = deaths.append(ylls).append(ylds)\n",
    "\n",
    "# sum across age groups, mother status, cause, treatment group\n",
    "overall_result_counts = result_counts.groupby(['input_draw','location','scenario','measure']).sum().reset_index()\n",
    "\n",
    "# calculate dalys\n",
    "dalys = overall_result_counts.reset_index().loc[overall_result_counts.reset_index().measure.isin(['ylds','ylls'])]\n",
    "dalys = dalys.groupby(['input_draw','location','scenario']).sum().reset_index().drop(columns='index')\n",
    "dalys['measure'] = 'dalys'\n",
    "overall_result_counts = overall_result_counts.append(dalys).set_index(['input_draw','location','measure','scenario']).sort_index()\n",
    "\n",
    "overall_result_counts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test that dalys = ylls + ylds\n",
    "\n",
    "test = overall_result_counts.reset_index()\n",
    "test_ylls = test.loc[test.measure == 'ylls'].set_index(['input_draw','location','scenario']).drop(columns='measure')\n",
    "test_deaths = test.loc[test.measure == 'death'].set_index(['input_draw','location','scenario']).drop(columns='measure')\n",
    "test_ylds = test.loc[test.measure == 'ylds'].set_index(['input_draw','location','scenario']).drop(columns='measure')\n",
    "test_dalys = test.loc[test.measure == 'dalys'].set_index(['input_draw','location','scenario']).drop(columns='measure')\n",
    "\n",
    "assert np.all(test_ylls > test_ylds)\n",
    "assert np.all(test_dalys == test_ylls + test_ylds)\n",
    "assert np.all(test_ylls > test_deaths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 value\n",
       "input_draw location scenario                          \n",
       "3          India    baseline                  100000.0\n",
       "                    bep_ce_scale_up           100000.0\n",
       "                    bep_ce_targeted_scale_up  100000.0\n",
       "                    bep_hd_scale_up_i         100000.0\n",
       "                    bep_hd_scale_up_ii        100000.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sum across age groups, mother status, cause, treatment group\n",
    "\n",
    "overall_births = population.loc[population.treatment_group == 'all']\n",
    "overall_births = overall_births.loc[overall_births.measure == 'total_population']\n",
    "overall_births = overall_births.groupby(['input_draw','location','scenario']).sum()\n",
    "\n",
    "assert len(overall_births.value.unique()) == 1, \"WARNING: number of births not the same in each scenario\"\n",
    "assert overall_births.value.unique()[0] == 100_000, \"WARNING: number of births not equal to expected value of 100,000\"\n",
    "\n",
    "overall_births.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>measure</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"10\" valign=\"top\">India</th>\n",
       "      <th rowspan=\"10\" valign=\"top\">dalys</th>\n",
       "      <th>baseline</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>19946.760402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>15816.212876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>33678.691126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>34993.133523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_iii</th>\n",
       "      <td>35174.701565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_targeted_scale_up_i</th>\n",
       "      <td>18567.009658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_targeted_scale_up_ii</th>\n",
       "      <td>21370.321440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_targeted_scale_up_iii</th>\n",
       "      <td>19355.061688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mmn_scale_up</th>\n",
       "      <td>12743.058657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 value\n",
       "input_draw location measure scenario                                  \n",
       "3          India    dalys   baseline                          0.000000\n",
       "                            bep_ce_scale_up               19946.760402\n",
       "                            bep_ce_targeted_scale_up      15816.212876\n",
       "                            bep_hd_scale_up_i             33678.691126\n",
       "                            bep_hd_scale_up_ii            34993.133523\n",
       "                            bep_hd_scale_up_iii           35174.701565\n",
       "                            bep_hd_targeted_scale_up_i    18567.009658\n",
       "                            bep_hd_targeted_scale_up_ii   21370.321440\n",
       "                            bep_hd_targeted_scale_up_iii  19355.061688\n",
       "                            mmn_scale_up                  12743.058657"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# averted counts\n",
    "baseline_counts = (overall_result_counts.reset_index()\n",
    "                   .loc[overall_result_counts.reset_index().scenario == 'baseline']\n",
    "                   .drop(columns='scenario')\n",
    "                   .set_index(['input_draw','location','measure']))\n",
    "averted_counts = baseline_counts - overall_result_counts.reset_index().set_index(['input_draw','location','measure','scenario'])\n",
    "\n",
    "averted_counts.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th>treatment_group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">baseline</th>\n",
       "      <th>bep</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ifa</th>\n",
       "      <td>35192.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mmn</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>none</th>\n",
       "      <td>64808.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <th>bep</th>\n",
       "      <td>79789.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       value\n",
       "input_draw location scenario        treatment_group         \n",
       "3          India    baseline        bep                  0.0\n",
       "                                    ifa              35192.0\n",
       "                                    mmn                  0.0\n",
       "                                    none             64808.0\n",
       "                    bep_ce_scale_up bep              79789.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treatment_counts = population.loc[population.treatment_group != 'all']\n",
    "treatment_counts = treatment_counts.groupby(['input_draw','location','scenario','treatment_group']).sum()\n",
    "\n",
    "assert treatment_counts.groupby(['input_draw','location','scenario']).sum().value.unique()[0] == 100_000, \"ERROR: sum of treatment counts across input draws and scenario does not equal expected value of 100,000 for all scenarios/draws\"\n",
    "\n",
    "treatment_counts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>treatment_group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <th>ifa</th>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <th>ifa</th>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <th>ifa</th>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <th>ifa</th>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <th>ifa</th>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            value\n",
       "input_draw treatment_group       \n",
       "3          ifa               2.69\n",
       "21         ifa               2.69\n",
       "29         ifa               2.69\n",
       "55         ifa               2.69\n",
       "78         ifa               2.69"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make cost per treatment dataframe\n",
    "\n",
    "input_draws = treatment_counts.reset_index()['input_draw'].unique()\n",
    "\n",
    "ifa_cost = pd.DataFrame()\n",
    "ifa_cost['input_draw'] = input_draws\n",
    "ifa_cost['value'] = 2.69\n",
    "ifa_cost['treatment_group'] = 'ifa'\n",
    "\n",
    "mmn_cost = pd.DataFrame()\n",
    "mmn_cost['input_draw'] = input_draws\n",
    "mmn_cost['value'] = 3.69\n",
    "mmn_cost['treatment_group'] = 'mmn'\n",
    "\n",
    "np.random.seed(12345)\n",
    "bep_cost = pd.DataFrame()\n",
    "bep_cost['input_draw'] = input_draws\n",
    "bep_cost['value'] = scipy.stats.gamma.rvs(a, loc, scale, size=len(bep_cost)) + 3.69\n",
    "bep_cost['treatment_group'] = 'bep'\n",
    "\n",
    "none_cost = pd.DataFrame()\n",
    "none_cost['input_draw'] = input_draws\n",
    "none_cost['value'] = 0\n",
    "none_cost['treatment_group'] = 'none'\n",
    "\n",
    "costs = ifa_cost.append(mmn_cost).append(bep_cost).append(none_cost).set_index(['input_draw','treatment_group'])\n",
    "costs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>treatment_group</th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th>bep</th>\n",
       "      <th>India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ifa</th>\n",
       "      <th>India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>35192.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mmn</th>\n",
       "      <th>India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>none</th>\n",
       "      <th>India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>64808.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep</th>\n",
       "      <th>India</th>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>79789.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       value\n",
       "input_draw treatment_group location scenario                \n",
       "3          bep             India    baseline             0.0\n",
       "           ifa             India    baseline         35192.0\n",
       "           mmn             India    baseline             0.0\n",
       "           none            India    baseline         64808.0\n",
       "           bep             India    bep_ce_scale_up  79789.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treatment_counts.reset_index().set_index(['input_draw','treatment_group','location','scenario']).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>9.466648e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>4.856388e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>1.065432e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>4.856388e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>4.856388e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     value\n",
       "input_draw location scenario                              \n",
       "3          India    baseline                  9.466648e+04\n",
       "                    bep_ce_scale_up           4.856388e+06\n",
       "                    bep_ce_targeted_scale_up  1.065432e+06\n",
       "                    bep_hd_scale_up_i         4.856388e+06\n",
       "                    bep_hd_scale_up_ii        4.856388e+06"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overall_costs = treatment_counts.reset_index().set_index(['input_draw','treatment_group','location','scenario']) * costs\n",
    "overall_costs = overall_costs.reset_index().groupby(['input_draw','location','scenario']).sum()\n",
    "overall_costs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check ordering of costs for scenarios\n",
    "test = overall_costs.reset_index()\n",
    "test_baseline = test.loc[test.scenario == 'baseline'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "test_mmn = test.loc[test.scenario == 'mmn_scale_up'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "test_bep_ce_scale_up = test.loc[test.scenario == 'bep_ce_scale_up'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "test_bep_ce_targeted_scale_up = test.loc[test.scenario == 'bep_ce_targeted_scale_up'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "test_bep_hd_scale_up = test.loc[test.scenario == 'bep_hd_scale_up_i'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "test_bep_hd_targeted_scale_up = test.loc[test.scenario == 'bep_hd_targeted_scale_up_i'].drop(columns='scenario').set_index(['input_draw','location'])\n",
    "\n",
    "assert np.all(test_baseline < test_mmn)\n",
    "assert np.all(test_mmn < test_bep_ce_targeted_scale_up)\n",
    "assert np.all(test_bep_ce_targeted_scale_up < test_bep_ce_scale_up)\n",
    "assert np.all(test_bep_ce_targeted_scale_up == test_bep_hd_targeted_scale_up)\n",
    "assert np.all(test_bep_ce_scale_up == test_bep_hd_scale_up)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th>baseline</th>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>4.761722e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>9.707650e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>4.761722e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>4.761722e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     value\n",
       "input_draw location scenario                              \n",
       "3          India    baseline                  0.000000e+00\n",
       "                    bep_ce_scale_up           4.761722e+06\n",
       "                    bep_ce_targeted_scale_up  9.707650e+05\n",
       "                    bep_hd_scale_up_i         4.761722e+06\n",
       "                    bep_hd_scale_up_ii        4.761722e+06"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "baseline_costs = (overall_costs.reset_index()\n",
    "                  .loc[overall_costs.reset_index().scenario == 'baseline']\n",
    "                  .drop(columns='scenario')\n",
    "                  .set_index(['input_draw','location']))\n",
    "incremental_costs = overall_costs - baseline_costs\n",
    "incremental_costs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th>measure</th>\n",
       "      <th colspan=\"8\" halign=\"left\">value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>2.5%</th>\n",
       "      <th>50%</th>\n",
       "      <th>97.5%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_ce_scale_up</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>239.017731</td>\n",
       "      <td>60.348264</td>\n",
       "      <td>159.268059</td>\n",
       "      <td>161.665327</td>\n",
       "      <td>230.548120</td>\n",
       "      <td>395.210643</td>\n",
       "      <td>424.672104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_ce_targeted_scale_up</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>60.948540</td>\n",
       "      <td>12.208864</td>\n",
       "      <td>40.752777</td>\n",
       "      <td>45.612546</td>\n",
       "      <td>58.177386</td>\n",
       "      <td>93.508388</td>\n",
       "      <td>99.985686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_i</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>143.466717</td>\n",
       "      <td>24.857372</td>\n",
       "      <td>107.298868</td>\n",
       "      <td>108.481622</td>\n",
       "      <td>140.594033</td>\n",
       "      <td>183.610216</td>\n",
       "      <td>246.202380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_ii</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>143.296084</td>\n",
       "      <td>24.931713</td>\n",
       "      <td>107.758429</td>\n",
       "      <td>109.739654</td>\n",
       "      <td>140.053401</td>\n",
       "      <td>194.956579</td>\n",
       "      <td>251.609217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_iii</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>139.413976</td>\n",
       "      <td>24.600650</td>\n",
       "      <td>103.134564</td>\n",
       "      <td>107.279757</td>\n",
       "      <td>137.158265</td>\n",
       "      <td>191.101765</td>\n",
       "      <td>241.719727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   location                  scenario measure value                         \\\n",
       "                                              count        mean        std   \n",
       "4     India           bep_ce_scale_up   dalys  50.0  239.017731  60.348264   \n",
       "8     India  bep_ce_targeted_scale_up   dalys  50.0   60.948540  12.208864   \n",
       "12    India         bep_hd_scale_up_i   dalys  50.0  143.466717  24.857372   \n",
       "16    India        bep_hd_scale_up_ii   dalys  50.0  143.296084  24.931713   \n",
       "20    India       bep_hd_scale_up_iii   dalys  50.0  139.413976  24.600650   \n",
       "\n",
       "                                                                \n",
       "           min        2.5%         50%       97.5%         max  \n",
       "4   159.268059  161.665327  230.548120  395.210643  424.672104  \n",
       "8    40.752777   45.612546   58.177386   93.508388   99.985686  \n",
       "12  107.298868  108.481622  140.594033  183.610216  246.202380  \n",
       "16  107.758429  109.739654  140.053401  194.956579  251.609217  \n",
       "20  103.134564  107.279757  137.158265  191.101765  241.719727  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icers = incremental_costs / averted_counts.reset_index().set_index(['input_draw','location','scenario','measure'])\n",
    "icers_summarized = icers.groupby(['location','scenario','measure']).describe(percentiles=[0.025,0.975])\n",
    "icers_summarized = icers_summarized.reset_index().loc[icers_summarized.reset_index().scenario != 'baseline'].loc[icers_summarized.reset_index().measure == 'dalys']\n",
    "icers_summarized.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(2,2)\n",
    "\n",
    "plot_dalys = averted_counts.reset_index()\n",
    "plot_dalys = plot_dalys.loc[plot_dalys.scenario != 'baseline'].loc[plot_dalys.measure == 'dalys']\n",
    "plot_dalys['value'] = plot_dalys['value'] / 1_000\n",
    "\n",
    "plot_cost = incremental_costs.reset_index()\n",
    "plot_cost = plot_cost.loc[plot_cost.scenario != 'baseline']\n",
    "plot_cost['value'] = plot_cost['value'] / 1_000_000\n",
    "\n",
    "ylim = 10\n",
    "xlim = 100\n",
    "\n",
    "scenarios = ['mmn_scale_up',\n",
    "             'bep_ce_scale_up', \n",
    "             'bep_ce_targeted_scale_up',\n",
    "             'bep_hd_scale_up_i',\n",
    "             'bep_hd_scale_up_ii', \n",
    "             'bep_hd_scale_up_iii',\n",
    "             'bep_hd_targeted_scale_up_i'\n",
    "             'bep_hd_targeted_scale_up_ii',\n",
    "             'bep_hd_targeted_scale_up_iii']\n",
    "\n",
    "location = 'India'\n",
    "for scenario in scenarios:\n",
    "    axs[0,0].scatter(plot_dalys.loc[plot_dalys.location == location].loc[plot_dalys.scenario == scenario]['value'].values,\n",
    "                 plot_cost.loc[plot_cost.location == location].loc[plot_cost.scenario == scenario]['value'].values)\n",
    "axs[0,0].set_title(location,fontsize=20)\n",
    "axs[0,0].set_ylim(0,ylim)\n",
    "axs[0,0].set_xlim(0,xlim)\n",
    "    \n",
    "location = 'Mali'\n",
    "for scenario in scenarios:\n",
    "    axs[0,1].scatter(plot_dalys.loc[plot_dalys.location == location].loc[plot_dalys.scenario == scenario]['value'].values,\n",
    "                 plot_cost.loc[plot_cost.location == location].loc[plot_cost.scenario == scenario]['value'].values)\n",
    "axs[0,1].set_title(location,fontsize=20)\n",
    "axs[0,1].set_ylim(0,ylim)\n",
    "axs[0,1].set_xlim(0,xlim)\n",
    "    \n",
    "location = 'Pakistan'\n",
    "for scenario in scenarios:\n",
    "    axs[1,0].scatter(plot_dalys.loc[plot_dalys.location == location].loc[plot_dalys.scenario == scenario]['value'].values,\n",
    "                 plot_cost.loc[plot_cost.location == location].loc[plot_cost.scenario == scenario]['value'].values)\n",
    "axs[1,0].set_title(location,fontsize=20)\n",
    "axs[1,0].set_ylim(0,ylim)\n",
    "axs[1,0].set_xlim(0,xlim)\n",
    "    \n",
    "location = 'Tanzania'\n",
    "for scenario in scenarios:\n",
    "    axs[1,1].scatter(plot_dalys.loc[plot_dalys.location == location].loc[plot_dalys.scenario == scenario]['value'].values,\n",
    "                 plot_cost.loc[plot_cost.location == location].loc[plot_cost.scenario == scenario]['value'].values)\n",
    "axs[1,1].set_title(location,fontsize=20)\n",
    "axs[1,1].set_ylim(0,ylim)\n",
    "axs[1,1].set_xlim(0,xlim)\n",
    "\n",
    "for ax in axs.flat:\n",
    "    ax.set(xlabel='DALYs Averted in Thousands per 100,000 Births', \n",
    "           ylabel='Incremental plot_cost ($) in Millions per 100,000 Births')\n",
    "    \n",
    "plt.legend(scenarios)\n",
    "plt.suptitle('DALYs Averted Versus Incremental plot_cost Relative to Baseline for 100,000 Births -Summer 2020-',x=1.1,y=2.6,fontsize=20)\n",
    "plt.subplots_adjust(right=2.2, top=2.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'DALYs in Thousands per 100,000 Births - Summer2020 -')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = overall_result_counts.reset_index()\n",
    "data = data.loc[data.measure == 'dalys']\n",
    "data = data.groupby(['location','scenario']).describe(percentiles=[0.025,0.975]).reset_index()\n",
    "data['value'] = data['value'] / 1_000\n",
    "\n",
    "# bar width\n",
    "barWidth = 0.15\n",
    "w = 0.15\n",
    "\n",
    "scenarios = ['baseline',\n",
    "             'mmn_scale_up',\n",
    "             'bep_ce_scale_up', \n",
    "             'bep_hd_scale_up_iii',\n",
    "             'bep_ce_targeted_scale_up',\n",
    "             'bep_hd_targeted_scale_up_iii']\n",
    "             #'bep_hd_scale_up_i',\n",
    "             #'bep_hd_scale_up_ii', \n",
    "             \n",
    "             #'bep_hd_targeted_scale_up_i'\n",
    "             #'bep_hd_targeted_scale_up_ii',\n",
    "             \n",
    "\n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "upper_1 = data.loc[data.scenario == scenarios[0]]['value','max'].values - data.loc[data.scenario == scenarios[0]]['value','mean'].values \n",
    "lower_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values - data.loc[data.scenario == scenarios[0]]['value','min'].values \n",
    "\n",
    "mean_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values\n",
    "upper_2 = data.loc[data.scenario == scenarios[1]]['value','max'].values - data.loc[data.scenario == scenarios[1]]['value','mean'].values \n",
    "lower_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values - data.loc[data.scenario == scenarios[1]]['value','min'].values \n",
    "\n",
    "mean_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values\n",
    "upper_3 = data.loc[data.scenario == scenarios[2]]['value','max'].values - data.loc[data.scenario == scenarios[2]]['value','mean'].values \n",
    "lower_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values - data.loc[data.scenario == scenarios[2]]['value','min'].values \n",
    "\n",
    "mean_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values\n",
    "upper_4 = data.loc[data.scenario == scenarios[3]]['value','max'].values - data.loc[data.scenario == scenarios[3]]['value','mean'].values \n",
    "lower_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values - data.loc[data.scenario == scenarios[3]]['value','min'].values \n",
    "\n",
    "mean_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values\n",
    "upper_5 = data.loc[data.scenario == scenarios[4]]['value','max'].values - data.loc[data.scenario == scenarios[4]]['value','mean'].values \n",
    "lower_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values - data.loc[data.scenario == scenarios[4]]['value','min'].values \n",
    "\n",
    "mean_6 = data.loc[data.scenario == scenarios[5]]['value','mean'].values\n",
    "upper_6 = data.loc[data.scenario == scenarios[5]]['value','max'].values - data.loc[data.scenario == scenarios[5]]['value','mean'].values \n",
    "lower_6 = data.loc[data.scenario == scenarios[5]]['value','mean'].values - data.loc[data.scenario == scenarios[5]]['value','min'].values \n",
    "\n",
    "\n",
    "\n",
    "a = np.arange(len(mean_1))\n",
    "b = [x + barWidth for x in a]\n",
    "c = [x + barWidth for x in b]\n",
    "d = [x + barWidth for x in c]\n",
    "e = [x + barWidth for x in d]\n",
    "f = [x + barWidth for x in e]\n",
    "\n",
    "plt.bar(a, mean_1, yerr=[lower_1, upper_1], width=barWidth)\n",
    "plt.bar(b, mean_2, yerr=[lower_2, upper_2], width=barWidth)\n",
    "plt.bar(c, mean_3, yerr=[lower_3, upper_3], width=barWidth)\n",
    "plt.bar(d, mean_4, yerr=[lower_4, upper_4], width=barWidth)\n",
    "plt.bar(e, mean_5, yerr=[lower_5, upper_5], width=barWidth)\n",
    "plt.bar(f, mean_6, yerr=[lower_6, upper_6], width=barWidth)\n",
    "\n",
    "plt.yticks([250,300,350,400,450,500,550,600,650,700,750,800,850,900])\n",
    "plt.legend(scenarios)\n",
    "plt.xticks([r + 2.5*barWidth for r in range(len(mean_1))], data.location.unique())\n",
    "\n",
    "plt.axis([-0.2 , 4 , 200, 900])\n",
    "plt.ylabel('DALYs (thousands) per 100,000 Births')\n",
    "plt.title('DALYs in Thousands per 100,000 Births - Summer2020 -')\n",
    "#scenarios[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>input_draw</th>\n",
       "      <th>location</th>\n",
       "      <th>measure</th>\n",
       "      <th>scenario</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">3</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">India</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">dalys</th>\n",
       "      <th>baseline</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <td>19946.760402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <td>15816.212876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <td>33678.691126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <td>34993.133523</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                             value\n",
       "input_draw location measure scenario                              \n",
       "3          India    dalys   baseline                      0.000000\n",
       "                            bep_ce_scale_up           19946.760402\n",
       "                            bep_ce_targeted_scale_up  15816.212876\n",
       "                            bep_hd_scale_up_i         33678.691126\n",
       "                            bep_hd_scale_up_ii        34993.133523"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "averted_counts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0.])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = averted_counts.reset_index()\n",
    "data = data.loc[data.measure == 'dalys']\n",
    "data = data.groupby(['location','scenario']).describe(percentiles=[0.025,0.975]).reset_index()\n",
    "\n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "mean_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'DALYs in Thousands per 100,000 Births - Summer2020 -')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = averted_counts.reset_index()\n",
    "data = data.loc[data.measure == 'dalys']\n",
    "data = data.groupby(['location','scenario']).describe(percentiles=[0.025,0.975]).reset_index()\n",
    "data['value'] = data['value'] / 1_000\n",
    "\n",
    "# bar width\n",
    "barWidth = 0.15\n",
    "w = 0.15\n",
    "\n",
    "scenarios = ['mmn_scale_up',\n",
    "             'bep_ce_scale_up', \n",
    "             'bep_hd_scale_up_iii',\n",
    "             'bep_ce_targeted_scale_up',\n",
    "             'bep_hd_targeted_scale_up_iii',\n",
    "             'bep_hd_scale_up_i']\n",
    "             #'bep_hd_scale_up_ii', \n",
    "             \n",
    "             #'bep_hd_targeted_scale_up_i'\n",
    "             #'bep_hd_targeted_scale_up_ii',\n",
    "             \n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "upper_1 = data.loc[data.scenario == scenarios[0]]['value','max'].values - data.loc[data.scenario == scenarios[0]]['value','mean'].values \n",
    "lower_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values - data.loc[data.scenario == scenarios[0]]['value','min'].values \n",
    "\n",
    "mean_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values\n",
    "upper_2 = data.loc[data.scenario == scenarios[1]]['value','max'].values - data.loc[data.scenario == scenarios[1]]['value','mean'].values \n",
    "lower_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values - data.loc[data.scenario == scenarios[1]]['value','min'].values \n",
    "\n",
    "mean_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values\n",
    "upper_3 = data.loc[data.scenario == scenarios[2]]['value','max'].values - data.loc[data.scenario == scenarios[2]]['value','mean'].values \n",
    "lower_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values - data.loc[data.scenario == scenarios[2]]['value','min'].values \n",
    "\n",
    "mean_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values\n",
    "upper_4 = data.loc[data.scenario == scenarios[3]]['value','max'].values - data.loc[data.scenario == scenarios[3]]['value','mean'].values \n",
    "lower_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values - data.loc[data.scenario == scenarios[3]]['value','min'].values \n",
    "\n",
    "mean_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values\n",
    "upper_5 = data.loc[data.scenario == scenarios[4]]['value','max'].values - data.loc[data.scenario == scenarios[4]]['value','mean'].values \n",
    "lower_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values - data.loc[data.scenario == scenarios[4]]['value','min'].values \n",
    "\n",
    "mean_6 = data.loc[data.scenario == scenarios[5]]['value','mean'].values\n",
    "upper_6 = data.loc[data.scenario == scenarios[5]]['value','max'].values - data.loc[data.scenario == scenarios[5]]['value','mean'].values \n",
    "lower_6 = data.loc[data.scenario == scenarios[5]]['value','mean'].values - data.loc[data.scenario == scenarios[5]]['value','min'].values \n",
    "\n",
    "\n",
    "\n",
    "a = np.arange(len(mean_1))\n",
    "b = [x + barWidth for x in a]\n",
    "c = [x + barWidth for x in b]\n",
    "d = [x + barWidth for x in c]\n",
    "e = [x + barWidth for x in d]\n",
    "f = [x + barWidth for x in e]\n",
    "\n",
    "plt.bar(a, mean_1, yerr=[lower_1, upper_1], width=barWidth)\n",
    "plt.bar(b, mean_2, yerr=[lower_2, upper_2], width=barWidth)\n",
    "plt.bar(c, mean_3, yerr=[lower_3, upper_3], width=barWidth)\n",
    "plt.bar(d, mean_4, yerr=[lower_4, upper_4], width=barWidth)\n",
    "plt.bar(e, mean_5, yerr=[lower_5, upper_5], width=barWidth)\n",
    "plt.bar(f, mean_6, yerr=[lower_6, upper_6], width=barWidth)\n",
    "\n",
    "#plt.yticks([250,300,350,400,450,500,550,600,650,700,750,800,850,900])\n",
    "plt.legend(scenarios)\n",
    "plt.xticks([r + 2.5*barWidth for r in range(len(mean_1))], data.location.unique())\n",
    "\n",
    "#plt.axis([-0.2 , 4 , 200, 900])\n",
    "plt.ylabel('DALYs (thousands) per 100,000 Births')\n",
    "plt.title('DALYs in Thousands per 100,000 Births - Summer2020 -')\n",
    "#scenarios[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>2.5%</th>\n",
       "      <th>50%</th>\n",
       "      <th>97.5%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    count  mean  std  min  2.5%  50%  97.5%  max\n",
       "10   0.05   0.0  0.0  0.0   0.0  0.0    0.0  0.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LOOKS LIKE THE ERROR BARS WERE UPSIDE DOWN IN NICOLE'S NOTEBOOK\n",
    "data.loc[data.location=='Mali'].loc[data.scenario=='baseline']['value']\n",
    "\n",
    "# see that the max value for mali baseline is almost 900, not the case for nicole's plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Incrememntal Cost Effectiveness Ratio (ICER) - Summer2020 -')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = icers_summarized.reset_index()\n",
    "\n",
    "# bar width\n",
    "barWidth = 0.15\n",
    "w = 0.15\n",
    "\n",
    "scenarios = ['mmn_scale_up',\n",
    "             'bep_ce_scale_up', \n",
    "             'bep_hd_scale_up_iii',\n",
    "             'bep_ce_targeted_scale_up',\n",
    "             'bep_hd_targeted_scale_up_iii']\n",
    "             #'bep_hd_scale_up_i',\n",
    "             #'bep_hd_scale_up_ii', \n",
    "             #'bep_hd_targeted_scale_up_i'\n",
    "             #'bep_hd_targeted_scale_up_ii',\n",
    "\n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "upper_1 = data.loc[data.scenario == scenarios[0]]['value','97.5%'].values - data.loc[data.scenario == scenarios[0]]['value','mean'].values \n",
    "lower_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values - data.loc[data.scenario == scenarios[0]]['value','2.5%'].values \n",
    "\n",
    "mean_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values\n",
    "upper_2 = data.loc[data.scenario == scenarios[1]]['value','97.5%'].values - data.loc[data.scenario == scenarios[1]]['value','mean'].values \n",
    "lower_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values - data.loc[data.scenario == scenarios[1]]['value','2.5%'].values \n",
    "\n",
    "mean_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values\n",
    "upper_3 = data.loc[data.scenario == scenarios[2]]['value','97.5%'].values - data.loc[data.scenario == scenarios[2]]['value','mean'].values \n",
    "lower_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values - data.loc[data.scenario == scenarios[2]]['value','2.5%'].values \n",
    "\n",
    "mean_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values\n",
    "upper_4 = data.loc[data.scenario == scenarios[3]]['value','97.5%'].values - data.loc[data.scenario == scenarios[3]]['value','mean'].values \n",
    "lower_4 = data.loc[data.scenario == scenarios[3]]['value','mean'].values - data.loc[data.scenario == scenarios[3]]['value','2.5%'].values \n",
    "\n",
    "mean_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values\n",
    "upper_5 = data.loc[data.scenario == scenarios[4]]['value','97.5%'].values - data.loc[data.scenario == scenarios[4]]['value','mean'].values \n",
    "lower_5 = data.loc[data.scenario == scenarios[4]]['value','mean'].values - data.loc[data.scenario == scenarios[4]]['value','2.5%'].values \n",
    "\n",
    "a = np.arange(len(mean_1))\n",
    "b = [x + barWidth for x in a]\n",
    "c = [x + barWidth for x in b]\n",
    "d = [x + barWidth for x in c]\n",
    "e = [x + barWidth for x in d]\n",
    "f = [x + barWidth for x in e]\n",
    "plt.figure(figsize=(12,10))\n",
    "plt.bar(a, mean_1, yerr=[lower_1, upper_1], width=barWidth)\n",
    "plt.bar(b, mean_2, yerr=[lower_2, upper_2], width=barWidth)\n",
    "plt.bar(c, mean_3, yerr=[lower_3, upper_3], width=barWidth)\n",
    "plt.bar(d, mean_4, yerr=[lower_4, upper_4], width=barWidth)\n",
    "plt.bar(e, mean_5, yerr=[lower_5, upper_5], width=barWidth)\n",
    "\n",
    "plt.legend(scenarios)\n",
    "\n",
    "threshold = 100\n",
    "threshold2 = 50\n",
    "threshold3 = 25\n",
    "plt.plot([-0.25,len(a)-.25], [threshold, threshold],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold2, threshold2],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold3, threshold3],'k--', c='gray')\n",
    "\n",
    "plt.xticks([r + 2.5*barWidth for r in range(len(mean_1))], data.location.unique())\n",
    "plt.axis([-0.2 , 4 , 0, 1000])\n",
    "plt.yticks([25,50,100,200,400,600,800,1000])\n",
    "\n",
    "plt.ylabel('ICER (cost divided)')\n",
    "plt.title('Incrememntal Cost Effectiveness Ratio (ICER) - Summer2020 -')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'DALYs in Thousands per 100,000 Births - Summer2020 -')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = icers_summarized.reset_index()\n",
    "\n",
    "# bar width\n",
    "barWidth = 0.3\n",
    "w = 0.3\n",
    "\n",
    "scenarios = ['bep_hd_scale_up_i',\n",
    "             'bep_hd_scale_up_ii',\n",
    "             'bep_hd_scale_up_iii']\n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "upper_1 = data.loc[data.scenario == scenarios[0]]['value','max'].values - data.loc[data.scenario == scenarios[0]]['value','mean'].values \n",
    "lower_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values - data.loc[data.scenario == scenarios[0]]['value','min'].values \n",
    "\n",
    "mean_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values\n",
    "upper_2 = data.loc[data.scenario == scenarios[1]]['value','max'].values - data.loc[data.scenario == scenarios[1]]['value','mean'].values \n",
    "lower_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values - data.loc[data.scenario == scenarios[1]]['value','min'].values \n",
    "\n",
    "mean_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values\n",
    "upper_3 = data.loc[data.scenario == scenarios[2]]['value','max'].values - data.loc[data.scenario == scenarios[2]]['value','mean'].values \n",
    "lower_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values - data.loc[data.scenario == scenarios[2]]['value','min'].values \n",
    "\n",
    "a = np.arange(len(mean_1))\n",
    "b = [x + barWidth for x in a]\n",
    "c = [x + barWidth for x in b]\n",
    "d = [x + barWidth for x in c]\n",
    "e = [x + barWidth for x in d]\n",
    "f = [x + barWidth for x in e]\n",
    "#plt.figure(figsize=(12,10))\n",
    "plt.bar(a, mean_1, yerr=[lower_1, upper_1], width=barWidth)\n",
    "plt.bar(b, mean_2, yerr=[lower_2, upper_2], width=barWidth)\n",
    "plt.bar(c, mean_3, yerr=[lower_3, upper_3], width=barWidth)\n",
    "\n",
    "plt.legend(scenarios)\n",
    "\n",
    "threshold = 100\n",
    "threshold2 = 50\n",
    "threshold3 = 25\n",
    "plt.plot([-0.25,len(a)-.25], [threshold, threshold],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold2, threshold2],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold3, threshold3],'k--', c='gray')\n",
    "\n",
    "plt.xticks([r + barWidth for r in range(len(mean_1))], data.location.unique())\n",
    "#plt.axis([-0.2 , 4 , 0, 1000])\n",
    "#plt.yticks([25,50,100,200,400,600,800,1000])\n",
    "\n",
    "plt.ylabel('DALYs (thousands) per 100,000 Births')\n",
    "plt.title('DALYs in Thousands per 100,000 Births - Summer2020 -')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'DALYs in Thousands per 100,000 Births - Summer2020 -')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = icers_summarized.reset_index()\n",
    "\n",
    "# bar width\n",
    "barWidth = 0.3\n",
    "w = 0.3\n",
    "\n",
    "scenarios = ['bep_hd_targeted_scale_up_i',\n",
    "             'bep_hd_targeted_scale_up_ii',\n",
    "             'bep_hd_targeted_scale_up_iii']\n",
    "mean_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values\n",
    "upper_1 = data.loc[data.scenario == scenarios[0]]['value','max'].values - data.loc[data.scenario == scenarios[0]]['value','mean'].values \n",
    "lower_1 = data.loc[data.scenario == scenarios[0]]['value','mean'].values - data.loc[data.scenario == scenarios[0]]['value','min'].values \n",
    "\n",
    "mean_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values\n",
    "upper_2 = data.loc[data.scenario == scenarios[1]]['value','max'].values - data.loc[data.scenario == scenarios[1]]['value','mean'].values \n",
    "lower_2 = data.loc[data.scenario == scenarios[1]]['value','mean'].values - data.loc[data.scenario == scenarios[1]]['value','min'].values \n",
    "\n",
    "mean_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values\n",
    "upper_3 = data.loc[data.scenario == scenarios[2]]['value','max'].values - data.loc[data.scenario == scenarios[2]]['value','mean'].values \n",
    "lower_3 = data.loc[data.scenario == scenarios[2]]['value','mean'].values - data.loc[data.scenario == scenarios[2]]['value','min'].values \n",
    "\n",
    "a = np.arange(len(mean_1))\n",
    "b = [x + barWidth for x in a]\n",
    "c = [x + barWidth for x in b]\n",
    "d = [x + barWidth for x in c]\n",
    "e = [x + barWidth for x in d]\n",
    "f = [x + barWidth for x in e]\n",
    "plt.bar(a, mean_1, yerr=[lower_1, upper_1], width=barWidth)\n",
    "plt.bar(b, mean_2, yerr=[lower_2, upper_2], width=barWidth)\n",
    "plt.bar(c, mean_3, yerr=[lower_3, upper_3], width=barWidth)\n",
    "\n",
    "plt.legend(scenarios)\n",
    "threshold = 100\n",
    "threshold2 = 50\n",
    "threshold3 = 25\n",
    "plt.plot([-0.25,len(a)-.25], [threshold, threshold],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold2, threshold2],'k--', c='gray')\n",
    "plt.plot([-0.25,len(a)-.25], [threshold3, threshold3],'k--', c='gray')\n",
    "plt.xticks([r + barWidth for r in range(len(mean_1))], data.location.unique())\n",
    "plt.ylabel('DALYs (thousands) per 100,000 Births')\n",
    "plt.title('DALYs in Thousands per 100,000 Births - Summer2020 -')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>scenario</th>\n",
       "      <th>measure</th>\n",
       "      <th colspan=\"8\" halign=\"left\">value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>2.5%</th>\n",
       "      <th>50%</th>\n",
       "      <th>97.5%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_ce_scale_up</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>239.017731</td>\n",
       "      <td>60.348264</td>\n",
       "      <td>159.268059</td>\n",
       "      <td>161.665327</td>\n",
       "      <td>230.548120</td>\n",
       "      <td>395.210643</td>\n",
       "      <td>424.672104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_ce_targeted_scale_up</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>60.948540</td>\n",
       "      <td>12.208864</td>\n",
       "      <td>40.752777</td>\n",
       "      <td>45.612546</td>\n",
       "      <td>58.177386</td>\n",
       "      <td>93.508388</td>\n",
       "      <td>99.985686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_i</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>143.466717</td>\n",
       "      <td>24.857372</td>\n",
       "      <td>107.298868</td>\n",
       "      <td>108.481622</td>\n",
       "      <td>140.594033</td>\n",
       "      <td>183.610216</td>\n",
       "      <td>246.202380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_ii</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>143.296084</td>\n",
       "      <td>24.931713</td>\n",
       "      <td>107.758429</td>\n",
       "      <td>109.739654</td>\n",
       "      <td>140.053401</td>\n",
       "      <td>194.956579</td>\n",
       "      <td>251.609217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>India</td>\n",
       "      <td>bep_hd_scale_up_iii</td>\n",
       "      <td>dalys</td>\n",
       "      <td>50.0</td>\n",
       "      <td>139.413976</td>\n",
       "      <td>24.600650</td>\n",
       "      <td>103.134564</td>\n",
       "      <td>107.279757</td>\n",
       "      <td>137.158265</td>\n",
       "      <td>191.101765</td>\n",
       "      <td>241.719727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   location                  scenario measure value                         \\\n",
       "                                              count        mean        std   \n",
       "4     India           bep_ce_scale_up   dalys  50.0  239.017731  60.348264   \n",
       "8     India  bep_ce_targeted_scale_up   dalys  50.0   60.948540  12.208864   \n",
       "12    India         bep_hd_scale_up_i   dalys  50.0  143.466717  24.857372   \n",
       "16    India        bep_hd_scale_up_ii   dalys  50.0  143.296084  24.931713   \n",
       "20    India       bep_hd_scale_up_iii   dalys  50.0  139.413976  24.600650   \n",
       "\n",
       "                                                                \n",
       "           min        2.5%         50%       97.5%         max  \n",
       "4   159.268059  161.665327  230.548120  395.210643  424.672104  \n",
       "8    40.752777   45.612546   58.177386   93.508388   99.985686  \n",
       "12  107.298868  108.481622  140.594033  183.610216  246.202380  \n",
       "16  107.758429  109.739654  140.053401  194.956579  251.609217  \n",
       "20  103.134564  107.279757  137.158265  191.101765  241.719727  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icers_summarized.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['dalys'], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "icers_summarized.measure.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"9\" halign=\"left\"></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>scenario</th>\n",
       "      <th>bep_ce_scale_up</th>\n",
       "      <th>bep_ce_targeted_scale_up</th>\n",
       "      <th>bep_hd_scale_up_i</th>\n",
       "      <th>bep_hd_scale_up_ii</th>\n",
       "      <th>bep_hd_scale_up_iii</th>\n",
       "      <th>bep_hd_targeted_scale_up_i</th>\n",
       "      <th>bep_hd_targeted_scale_up_ii</th>\n",
       "      <th>bep_hd_targeted_scale_up_iii</th>\n",
       "      <th>mmn_scale_up</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>location</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>India</th>\n",
       "      <td>239.0 (161.7, 395.2)</td>\n",
       "      <td>60.9 (45.6, 93.5)</td>\n",
       "      <td>143.5 (108.5, 183.6)</td>\n",
       "      <td>143.3 (109.7, 195.0)</td>\n",
       "      <td>139.4 (107.3, 191.1)</td>\n",
       "      <td>51.4 (38.3, 71.7)</td>\n",
       "      <td>50.9 (38.9, 83.4)</td>\n",
       "      <td>51.7 (39.4, 83.6)</td>\n",
       "      <td>15.2 (10.5, 22.2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mali</th>\n",
       "      <td>219.7 (122.1, 350.1)</td>\n",
       "      <td>41.1 (24.3, 61.6)</td>\n",
       "      <td>96.5 (66.9, 133.8)</td>\n",
       "      <td>93.9 (64.9, 132.9)</td>\n",
       "      <td>92.8 (63.3, 128.7)</td>\n",
       "      <td>32.2 (21.6, 46.0)</td>\n",
       "      <td>30.4 (20.2, 49.9)</td>\n",
       "      <td>31.9 (21.3, 56.7)</td>\n",
       "      <td>14.8 (8.6, 25.7)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pakistan</th>\n",
       "      <td>157.5 (102.3, 263.5)</td>\n",
       "      <td>30.3 (20.4, 47.9)</td>\n",
       "      <td>96.7 (69.6, 137.3)</td>\n",
       "      <td>96.2 (69.3, 134.3)</td>\n",
       "      <td>94.5 (68.4, 128.8)</td>\n",
       "      <td>27.2 (19.3, 40.2)</td>\n",
       "      <td>26.7 (18.5, 37.6)</td>\n",
       "      <td>27.1 (18.7, 38.5)</td>\n",
       "      <td>10.8 (6.6, 16.1)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tanzania</th>\n",
       "      <td>685.1 (371.0, 1294.8)</td>\n",
       "      <td>120.2 (65.4, 204.4)</td>\n",
       "      <td>207.6 (147.4, 326.6)</td>\n",
       "      <td>211.2 (143.1, 350.4)</td>\n",
       "      <td>208.7 (139.9, 347.5)</td>\n",
       "      <td>81.5 (49.9, 137.1)</td>\n",
       "      <td>101.1 (49.4, 196.8)</td>\n",
       "      <td>104.6 (51.0, 212.1)</td>\n",
       "      <td>49.9 (25.8, 89.4)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          \\\n",
       "scenario        bep_ce_scale_up bep_ce_targeted_scale_up   \n",
       "location                                                   \n",
       "India      239.0 (161.7, 395.2)        60.9 (45.6, 93.5)   \n",
       "Mali       219.7 (122.1, 350.1)        41.1 (24.3, 61.6)   \n",
       "Pakistan   157.5 (102.3, 263.5)        30.3 (20.4, 47.9)   \n",
       "Tanzania  685.1 (371.0, 1294.8)      120.2 (65.4, 204.4)   \n",
       "\n",
       "                                                                            \\\n",
       "scenario     bep_hd_scale_up_i    bep_hd_scale_up_ii   bep_hd_scale_up_iii   \n",
       "location                                                                     \n",
       "India     143.5 (108.5, 183.6)  143.3 (109.7, 195.0)  139.4 (107.3, 191.1)   \n",
       "Mali        96.5 (66.9, 133.8)    93.9 (64.9, 132.9)    92.8 (63.3, 128.7)   \n",
       "Pakistan    96.7 (69.6, 137.3)    96.2 (69.3, 134.3)    94.5 (68.4, 128.8)   \n",
       "Tanzania  207.6 (147.4, 326.6)  211.2 (143.1, 350.4)  208.7 (139.9, 347.5)   \n",
       "\n",
       "                                                                 \\\n",
       "scenario bep_hd_targeted_scale_up_i bep_hd_targeted_scale_up_ii   \n",
       "location                                                          \n",
       "India             51.4 (38.3, 71.7)           50.9 (38.9, 83.4)   \n",
       "Mali              32.2 (21.6, 46.0)           30.4 (20.2, 49.9)   \n",
       "Pakistan          27.2 (19.3, 40.2)           26.7 (18.5, 37.6)   \n",
       "Tanzania         81.5 (49.9, 137.1)         101.1 (49.4, 196.8)   \n",
       "\n",
       "                                                          \n",
       "scenario bep_hd_targeted_scale_up_iii       mmn_scale_up  \n",
       "location                                                  \n",
       "India               51.7 (39.4, 83.6)  15.2 (10.5, 22.2)  \n",
       "Mali                31.9 (21.3, 56.7)   14.8 (8.6, 25.7)  \n",
       "Pakistan            27.1 (18.7, 38.5)   10.8 (6.6, 16.1)  \n",
       "Tanzania          104.6 (51.0, 212.1)  49.9 (25.8, 89.4)  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.DataFrame.copy(icers_summarized)\n",
    "data['print'] = (data['value','mean'].round(1).astype(str) \n",
    "                          + ' (' \n",
    "                          + data['value','2.5%'].round(1).astype(str) \n",
    "                          + ', '\n",
    "                          + data['value','97.5%'].round(1).astype(str) \n",
    "                          + ')')\n",
    "data = pd.pivot_table(data, \n",
    "                               index='location',\n",
    "                              columns='scenario',\n",
    "                              values='print', aggfunc=lambda x: ' '.join(x))\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
